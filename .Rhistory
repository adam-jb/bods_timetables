theme(axis.text.y = element_blank(),
axis.text.x = element_blank())
fp %>% filter(link_id == 'L54')
for_plot %>% filter(link_id == 'L54') %>%
ggplot(aes(x = latitude, y = longitude)) +
geom_line() +
ggthemes::theme_few() +
theme(axis.text.y = element_blank(),
axis.text.x = element_blank())
unique(for_plot$route_section_id)
unique(for_plot$routelink)
head(full_isle_of_wight$routes)
head(full_isle_of_wight$journey_pattern_sections)
unique(full_isle_of_wight$journey_pattern_sections$journey_id)
head(full_isle_of_wight$operators)
head(full_isle_of_wight$service_details)
head(full_isle_of_wight$service_details)
dim(full_isle_of_wight$operators)
View(full_isle_of_wight$operators)
list_timetables[['service_details']]
head(full_isle_of_wight$standard_service)
head(full_isle_of_wight$standard_service)
head(full_isle_of_wight$standard_service)
full_isle_of_wight$standard_service[1,1]
head(full_isle_of_wight$standard_service %>% as.data.frame())
class(full_isle_of_wight$standard_service[1,1])
class(full_isle_of_wight$standard_service[1,:])
(full_isle_of_wight$standard_service[1,:])
(full_isle_of_wight$standard_service[1,])
class(full_isle_of_wight$standard_service[1,])
class(full_isle_of_wight$standard_service[,1])
full_isle_of_wight$standard_service[,1]
vector(full_isle_of_wight$standard_service[,1])
unlist(full_isle_of_wight$standard_service[,1])
ss <- full_isle_of_wight$standard_service
ss <- full_isle_of_wight$standard_service
for (i in 1:ncol(ss)){
ss[, i] <- unlist(ss[, i])
}
ss <- full_isle_of_wight$standard_service
ss[, i] <- unlist(as.data.frame(ss[, i]))
class(as.data.frame(ss[, i]))
class(ss)
setDF(full_isle_of_wight[[table_name]])
setDF(ss)
for (i in 1:ncol(ss)){
ss[, i] <- unlist(as.data.frame(ss[, i]))
}
head(ss)
for (i in seq_along(1:length(table_names))){
table_name <- table_names[i]
full_isle_of_wight[[table_name]] <- bind_rows(lapply(all_services_list, '[[', i))
full_isle_of_wight[[table_name]] <- distinct(full_isle_of_wight[[table_name]])
setDF(full_isle_of_wight[[table_name]])  # ensure it isn't a data.table
}
# saving results
save(full_isle_of_wight, file = "full_isle_of_wight.RData")
head(full_isle_of_wight$standard_service %>% as.data.frame())
head(ull_isle_of_wight$standard_service )
str(full_isle_of_wight$standard_service )
ss <- full_isle_of_wight$standard_service
for (i in 1:ncol(ss)){
ss[, i] <- unlist(ss[, i])
}
head(ss)
str(ss)
full_isle_of_wight$standard_service <- standard_service
# saving results
save(full_isle_of_wight, file = "full_isle_of_wight.RData")
head(full_isle_of_wight$standard_service)
dim(standard_service)
head(standard_service)
# Same process as above,  wrapped into a function ------------------------
get_list_of_dfs_for_service <- function(x, xml_path) {
xml_object <- read_xml(paste0(xml_path, "/", x)) %>%
xml_ns_strip()
l = as_list(xml_object)
## list to store 7 dataframes extracted from XML
list_timetables <- list()
# stop point codes and lat/longs
list_timetables[['stop_points']] <- l$TransXChange$StopPoints %>% extract_list_of_lists_to_df()
# route sections: linestrings (ie, links) for each section of the route
# looks like there is a set
# of linestrings for each of the route stored in 'routes'
# the 4 route_section_id values don't match the 4 route id's in 'routes' df below. Would
# have expected them to. Maybe can be linked: may have to read metadata
# don't bother with easting or northing here: only extract lat/long columns
all_route_sections_list  <- vector(length = length(l$TransXChange$RouteSections), mode = 'list')
for (iter in seq_along(1:length(all_route_sections_list))){
section_id <- attributes(l$TransXChange$RouteSections[[iter]])$id
routelinks <- lapply(map(l$TransXChange$RouteSections[[iter]], attributes), '[[', 2)  %>% unlist()
store_links <- vector(length = length(routelinks), mode = 'list')
for (i in seq_along(1:length(routelinks))){
links <- l$TransXChange$RouteSections[[iter]][[i]][[5]][[1]]
IDs <- lapply(map(links, attributes), '[[', 2) %>% unlist()
latitude <- lapply(links, '[[', 1) %>% lapply('[[', 3) %>% unlist()
longitude <- lapply(links, '[[', 1) %>% lapply('[[', 4) %>% unlist()
store_links[[i]] <- data.frame(routelinks[i], IDs, latitude, longitude)
}
route_section <- rbindlist(store_links) %>% rename(routelink = routelinks.i., link_id = IDs)
route_section$route_section_id <- section_id
all_route_sections_list[[iter]]  <- route_section
}
list_timetables[['all_route_sections_df']] <- rbindlist(all_route_sections_list)
# Routes: list of route IDs
routes <- l$TransXChange$Routes %>% map(attributes) %>% map(unlist)  %>% lapply(as.data.frame.list)
list_timetables[['routes']] <- routes %>% rbindlist() %>% select(-starts_with('names'))
# journey pattern sections
# has where FROM, where TO, RouteLink reference, RunTime
# StopPointRef links to stop_points
# Would expect RunTime to be numeric but it isn't
# journey_id looks like it should link to JourneyPatternRef from vehicle_journeys_and_departure_times
#   BUT there is an extra 'S' in the codes here. Could be a bug
value_store <- vector(mode='list', length = length(l$TransXChange$JourneyPatternSections))
for (i in seq_along(1:length(value_store))) {
first <- l$TransXChange$JourneyPatternSections[[i]]
first <- map(first, unlist) %>% lapply(as.data.frame.list) %>% rbindlist(fill=T)
first$journey_id <- attributes(l$TransXChange$JourneyPatternSections[[i]])$id
value_store[[i]] <- first
}
list_timetables[['journey_pattern_sections']] <- rbindlist(value_store, fill=T)
### Services: inc various info about the service. Split into 2 tables
all_order_service_data <- l$TransXChange$Services$Service
all_order_service_data[['StandardService']] <- NULL
all_order_service_df <- unlist(all_order_service_data) %>% as.data.frame() %>% t()%>% as.data.frame()
names(all_order_service_df) <- colnames(all_order_service_df)
standard_service <- l$TransXChange$Services$Service$StandardService
# Vias arent always included
if (sum(names(standard_service) == 'Vias') > 0.5) {
services_via <- expand.grid(standard_service$Origin, standard_service$Destination, unlist(standard_service$Vias))
standard_service[['Vias']] <- NULL    # need to do this to make journey pattern table
} else {
services_via <- expand.grid(standard_service$Origin, standard_service$Destination)
services_via$vias <- ''
}
names(services_via) <- c('start', 'end', 'vias')
list_timetables[['service_details']] <- data.frame(all_order_service_df, services_via)
# making journey pattern table (separate to other elements of 'Service' as formatted differently - deeper table)
standard_service[['Origin']] <- NULL
standard_service[['Destination']] <- NULL
standard_service <- rbindlist(standard_service)     # combine and loop to ensure dataframe format is correct
for (i in 1:ncol(standard_service)){
standard_service[, i] <- unlist(standard_service[, i])
}
list_timetables[['standard_service']] <- standard_service
## Operators
operators <- l$TransXChange$Operators %>% extract_list_of_lists_to_df()
operators$ServiceCode <- list_timetables[['service_details']]$ServiceCode  # adding service code
list_timetables[['operators']] <- operators
# get vehicle_journeys_and_departure_times
list_timetables[['vehicle_journeys_and_departure_times']] <- l$TransXChange$VehicleJourneys %>% extract_list_of_lists_to_df()
# adding file name source to all tables
for (n in names(list_timetables)) {
df <- list_timetables[[n]]
df$file_source <- rep(x, nrow(df))
list_timetables[[n]] <- df
}
list_timetables
}
### apply func to all services on Isle of Wight
all_services_list <- vector(mode='list', length=length(IoW_list))
for (i in seq_along(1:length(all_services_list))){
x = IoW_list[i]
all_services_list[[i]] <- get_list_of_dfs_for_service(x, xml_path)
print(x)
}
# append to get 8 large dfs covering all services
full_isle_of_wight <- list()
table_names <- names(all_services_list[[1]])
for (i in seq_along(1:length(table_names))){
table_name <- table_names[i]
full_isle_of_wight[[table_name]] <- bind_rows(lapply(all_services_list, '[[', i))
full_isle_of_wight[[table_name]] <- distinct(full_isle_of_wight[[table_name]])
setDF(full_isle_of_wight[[table_name]])  # ensure it isn't a data.table
}
# saving results
save(full_isle_of_wight, file = "full_isle_of_wight.RData")
table_names
# Same process as above,  wrapped into a function ------------------------
get_list_of_dfs_for_service <- function(x, xml_path) {
xml_object <- read_xml(paste0(xml_path, "/", x)) %>%
xml_ns_strip()
l = as_list(xml_object)
## list to store 7 dataframes extracted from XML
list_timetables <- list()
# stop point codes and lat/longs
list_timetables[['stop_points']] <- l$TransXChange$StopPoints %>% extract_list_of_lists_to_df()
# route sections: linestrings (ie, links) for each section of the route
# looks like there is a set
# of linestrings for each of the route stored in 'routes'
# the 4 route_section_id values don't match the 4 route id's in 'routes' df below. Would
# have expected them to. Maybe can be linked: may have to read metadata
# don't bother with easting or northing here: only extract lat/long columns
all_route_sections_list  <- vector(length = length(l$TransXChange$RouteSections), mode = 'list')
for (iter in seq_along(1:length(all_route_sections_list))){
section_id <- attributes(l$TransXChange$RouteSections[[iter]])$id
routelinks <- lapply(map(l$TransXChange$RouteSections[[iter]], attributes), '[[', 2)  %>% unlist()
store_links <- vector(length = length(routelinks), mode = 'list')
for (i in seq_along(1:length(routelinks))){
links <- l$TransXChange$RouteSections[[iter]][[i]][[5]][[1]]
IDs <- lapply(map(links, attributes), '[[', 2) %>% unlist()
latitude <- lapply(links, '[[', 1) %>% lapply('[[', 3) %>% unlist()
longitude <- lapply(links, '[[', 1) %>% lapply('[[', 4) %>% unlist()
store_links[[i]] <- data.frame(routelinks[i], IDs, latitude, longitude)
}
route_section <- rbindlist(store_links) %>% rename(routelink = routelinks.i., link_id = IDs)
route_section$route_section_id <- section_id
all_route_sections_list[[iter]]  <- route_section
}
list_timetables[['all_route_sections_df']] <- rbindlist(all_route_sections_list)
# Routes: list of route IDs
routes <- l$TransXChange$Routes %>% map(attributes) %>% map(unlist)  %>% lapply(as.data.frame.list)
list_timetables[['routes']] <- routes %>% rbindlist() %>% select(-starts_with('names'))
# journey pattern sections
# has where FROM, where TO, RouteLink reference, RunTime
# StopPointRef links to stop_points
# Would expect RunTime to be numeric but it isn't
# journey_id looks like it should link to JourneyPatternRef from vehicle_journeys_and_departure_times
#   BUT there is an extra 'S' in the codes here. Could be a bug
value_store <- vector(mode='list', length = length(l$TransXChange$JourneyPatternSections))
for (i in seq_along(1:length(value_store))) {
first <- l$TransXChange$JourneyPatternSections[[i]]
first <- map(first, unlist) %>% lapply(as.data.frame.list) %>% rbindlist(fill=T)
first$journey_id <- attributes(l$TransXChange$JourneyPatternSections[[i]])$id
value_store[[i]] <- first
}
list_timetables[['journey_pattern_sections']] <- rbindlist(value_store, fill=T)
### Services: inc various info about the service. Split into 2 tables
all_order_service_data <- l$TransXChange$Services$Service
all_order_service_data[['StandardService']] <- NULL
all_order_service_df <- unlist(all_order_service_data) %>% as.data.frame() %>% t()%>% as.data.frame()
names(all_order_service_df) <- colnames(all_order_service_df)
standard_service <- l$TransXChange$Services$Service$StandardService
# Vias arent always included
if (sum(names(standard_service) == 'Vias') > 0.5) {
services_via <- expand.grid(standard_service$Origin, standard_service$Destination, unlist(standard_service$Vias))
standard_service[['Vias']] <- NULL    # need to do this to make journey pattern table
} else {
services_via <- expand.grid(standard_service$Origin, standard_service$Destination)
services_via$vias <- ''
}
names(services_via) <- c('start', 'end', 'vias')
list_timetables[['service_details']] <- data.frame(all_order_service_df, services_via)
# making journey pattern table (separate to other elements of 'Service' as formatted differently - deeper table)
standard_service[['Origin']] <- NULL
standard_service[['Destination']] <- NULL
standard_service <- rbindlist(standard_service)     # combine and loop to ensure dataframe format is correct
setDF(standard_service)   # ensure isnt a data.table
for (i in 1:ncol(standard_service)){
standard_service[, i] <- unlist(standard_service[, i])
}
list_timetables[['standard_service']] <- standard_service
## Operators
operators <- l$TransXChange$Operators %>% extract_list_of_lists_to_df()
operators$ServiceCode <- list_timetables[['service_details']]$ServiceCode  # adding service code
list_timetables[['operators']] <- operators
# get vehicle_journeys_and_departure_times
list_timetables[['vehicle_journeys_and_departure_times']] <- l$TransXChange$VehicleJourneys %>% extract_list_of_lists_to_df()
# adding file name source to all tables
for (n in names(list_timetables)) {
df <- list_timetables[[n]]
df$file_source <- rep(x, nrow(df))
list_timetables[[n]] <- df
}
list_timetables
}
### apply func to all services on Isle of Wight
all_services_list <- vector(mode='list', length=length(IoW_list))
for (i in seq_along(1:length(all_services_list))){
x = IoW_list[i]
all_services_list[[i]] <- get_list_of_dfs_for_service(x, xml_path)
print(x)
}
# append to get 8 large dfs covering all services
full_isle_of_wight <- list()
table_names <- names(all_services_list[[1]])
for (i in seq_along(1:length(table_names))){
table_name <- table_names[i]
full_isle_of_wight[[table_name]] <- bind_rows(lapply(all_services_list, '[[', i))
full_isle_of_wight[[table_name]] <- distinct(full_isle_of_wight[[table_name]])
setDF(full_isle_of_wight[[table_name]])  # ensure it isn't a data.table
}
# saving results
save(full_isle_of_wight, file = "full_isle_of_wight.RData")
x = IoW_list[2]
print(x)
xml_object <- read_xml(paste0(xml_path, "/", x)) %>%
xml_ns_strip()
l = as_list(xml_object)
names(l$TransXChange)   # 7 headings of data
## list to store 7 dataframes extracted from XML
list_timetables <- list()
# stop point codes and lat/longs
list_timetables[['stop_points']] <- l$TransXChange$StopPoints %>% extract_list_of_lists_to_df()
# route sections: linestrings (ie, links) for each section of the route
# looks like there is a set
# of linestrings for each of the route stored in 'routes'
# the 4 route_section_id values don't match the 4 route id's in 'routes' df below. Would
# have expected them to. Maybe can be linked: may have to read metadata
# don't bother with easting or northing here: only extract lat/long columns
all_route_sections_list  <- vector(length = length(l$TransXChange$RouteSections), mode = 'list')
for (iter in seq_along(1:length(all_route_sections_list))){
section_id <- attributes(l$TransXChange$RouteSections[[iter]])$id
routelinks <- lapply(map(l$TransXChange$RouteSections[[iter]], attributes), '[[', 2)  %>% unlist()
store_links <- vector(length = length(routelinks), mode = 'list')
for (i in seq_along(1:length(routelinks))){
links <- l$TransXChange$RouteSections[[iter]][[i]][[5]][[1]]
IDs <- lapply(map(links, attributes), '[[', 2) %>% unlist()
latitude <- lapply(links, '[[', 1) %>% lapply('[[', 3) %>% unlist()
longitude <- lapply(links, '[[', 1) %>% lapply('[[', 4) %>% unlist()
store_links[[i]] <- data.frame(routelinks[i], IDs, latitude, longitude)
}
route_section <- rbindlist(store_links) %>% rename(routelink = routelinks.i., link_id = IDs)
route_section$route_section_id <- section_id
all_route_sections_list[[iter]]  <- route_section
}
list_timetables[['all_route_sections']] <- rbindlist(all_route_sections_list)
# Routes: list of route IDs
routes <- l$TransXChange$Routes %>% map(attributes) %>% map(unlist)  %>% lapply(as.data.frame.list)
list_timetables[['routes']] <- routes %>% rbindlist() %>% select(-starts_with('names'))
# journey pattern sections
# has where FROM, where TO, RouteLink reference, RunTime
# StopPointRef links to stop_points
# Would expect RunTime to be numeric but it isn't
# journey_id looks like it should link to JourneyPatternRef from vehicle_journeys_and_departure_times
#   BUT there is an extra 'S' in the codes here. Could be a bug
value_store <- vector(mode='list', length = length(l$TransXChange$JourneyPatternSections))
for (i in seq_along(1:length(value_store))) {
first <- l$TransXChange$JourneyPatternSections[[i]]
first <- map(first, unlist) %>% lapply(as.data.frame.list) %>% rbindlist(fill=T)
first$journey_id <- attributes(l$TransXChange$JourneyPatternSections[[i]])$id
value_store[[i]] <- first
}
list_timetables[['journey_pattern_sections']] <- rbindlist(value_store, fill=T)
## Operators
list_timetables[['operators']] <- l$TransXChange$Operators %>% extract_list_of_lists_to_df()
### Services: inc various info about the service. Split into 2 tables
all_order_service_data <- l$TransXChange$Services$Service
all_order_service_data[['StandardService']] <- NULL
all_order_service_df <- unlist(all_order_service_data) %>% as.data.frame() %>% t()%>% as.data.frame()
names(all_order_service_df) <- colnames(all_order_service_df)
standard_service <- l$TransXChange$Services$Service$StandardService
# Vias arent always included
if (sum(names(standard_service) == 'Vias') > 0.5) {
services_via <- expand.grid(standard_service$Origin, standard_service$Destination, unlist(standard_service$Vias))
standard_service[['Vias']] <- NULL  # need to do this to make journey pattern table
} else {
services_via <- expand.grid(standard_service$Origin, standard_service$Destination)
services_via$vias <- ''
}
names(services_via) <- c('start', 'end', 'vias')
list_timetables[['service_details']] <- data.frame(all_order_service_df, services_via)
# making journey pattern table (separate to other elements of 'Service' as formatted differently - deeper table)
standard_service[['Origin']] <- NULL
standard_service[['Destination']] <- NULL
standard_service <- rbindlist(standard_service)     # combine and loop to ensure dataframe format is correct
setDF(standard_service)   # ensure isnt a data.table
for (i in 1:ncol(standard_service)){
standard_service[, i] <- unlist(standard_service[, i])
}
list_timetables[['standard_service']] <- standard_service
list_timetables[['service_details']]
# exporting to json which can make it easier to intuit
for_json <- l$TransXChange$Services
jsonData <- toJSON(for_json) %>% jsonlite::prettify()
write(jsonData, "example_of_services.json")
# get vehicle_journeys_and_departure_times
## VehicleJourneyCode (unique) and JourneyPatternRef (not unique) look useful for looking things up
## I think JourneyPatternRef might be the code for a particular service
# DepartureTime looks like the team a given bus departed to start that service
list_timetables[['vehicle_journeys_and_departure_times']] <- l$TransXChange$VehicleJourneys %>% extract_list_of_lists_to_df()
print(lapply(list_timetables, dim))
list_timetables$all_route_sections
l$TransXChange$RouteSections[[iter]]
l$TransXChange$RouteSections[[iter]][[1]]
store_links
head(store_links)
store_links[[1]]
head(for_plot)
unique(for_plot$routelink)
for_plot %>% filter(link_id == 'L54') %>%
ggplot(aes(x = latitude, y = longitude)) +
geom_line() +
ggthemes::theme_few() +
theme(axis.text.y = element_blank(),
axis.text.x = element_blank())
for_plot %>% filter(routelink == 'RL1') %>%
ggplot(aes(x = latitude, y = longitude)) +
geom_line() +
ggthemes::theme_few() +
theme(axis.text.y = element_blank(),
axis.text.x = element_blank())
for_plot %>% filter(routelink == 'RL1')
for_plot %>% filter(routelink == 'RL1') %>%
ggplot(aes(x = latitude, y = longitude)) +
geom_point() +
ggthemes::theme_few() +
theme(axis.text.y = element_blank(),
axis.text.x = element_blank())
for_plot %>% filter(routelink == 'RL1') %>%
ggplot(aes(x = latitude, y = longitude, group = routelink)) +
geom_point() +
ggthemes::theme_few() +
theme(axis.text.y = element_blank(),
axis.text.x = element_blank())
for_plot %>% filter(routelink == 'RL1') %>%
ggplot(aes(x = latitude, y = longitude, group = routelink)) +
geom_line() +
ggthemes::theme_few() +
theme(axis.text.y = element_blank(),
axis.text.x = element_blank())
for_plot %>%
ggplot(aes(x = latitude, y = longitude, group = routelink)) +
geom_line() +
ggthemes::theme_few() +
theme(axis.text.y = element_blank(),
axis.text.x = element_blank())
unique(for_plot$routelink)
for_plot %>% filter(routelink == 'RL62') %>%
ggplot(aes(x = latitude, y = longitude, group = routelink)) +
geom_line() +
ggthemes::theme_few() +
theme(axis.text.y = element_blank(),
axis.text.x = element_blank())
for_plot %>% filter(routelink %in% c('RL62', 'RL63')) %>%
ggplot(aes(x = latitude, y = longitude, group = routelink, color = routelink)) +
geom_line() +
ggthemes::theme_few() +
theme(axis.text.y = element_blank(),
axis.text.x = element_blank())
for_plot %>% filter(routelink %in% c('RL62', 'RL63', 'RL64')) %>%
ggplot(aes(x = latitude, y = longitude, group = routelink, color = routelink)) +
geom_line() +
ggthemes::theme_few() +
theme(axis.text.y = element_blank(),
axis.text.x = element_blank())
for_plot %>% filter(routelink %in% c('RL62', 'RL63', 'RL64')) %>%
ggplot(aes(x = latitude, y = longitude, group = routelink, color = routelink)) +
geom_line() +
ggthemes::theme_few() +
theme(axis.text.y = element_blank(),
axis.text.x = element_blank())
for_plot %>% filter(route_section_id %in% c('RL62', 'RL63', 'RL64')) %>%
ggplot(aes(x = latitude, y = longitude, group = route_section_id, color = route_section_id)) +
geom_line() +
ggthemes::theme_few() +
theme(axis.text.y = element_blank(),
axis.text.x = element_blank())
full_isle_of_wight$all_route_sections_df %>% filter(route_section_id %in% c('RL62', 'RL63', 'RL64')) %>%
ggplot(aes(x = latitude, y = longitude, group = route_section_id, color = route_section_id)) +
geom_line() +
ggthemes::theme_few() +
theme(axis.text.y = element_blank(),
axis.text.x = element_blank())
full_isle_of_wight$all_route_sections_df %>% filter(route_section_id %in% c('RL62', 'RL63', 'RL64'))
full_isle_of_wight$all_route_sections_df
full_isle_of_wight$all_route_sections_df %>% filter(routelink %in% c('RL1', 'RL2', 'RL3')) %>%
ggplot(aes(x = latitude, y = longitude, group = routelink, color = routelink)) +
geom_line() +
ggthemes::theme_few() +
theme(axis.text.y = element_blank(),
axis.text.x = element_blank())
full_isle_of_wight$all_route_sections_df %>% filter(routelink %in% c('RL1', 'RL2', 'RL3', 'RL4', 'RL5')) %>%
ggplot(aes(x = latitude, y = longitude, group = routelink, color = routelink)) +
geom_line() +
ggthemes::theme_few() +
theme(axis.text.y = element_blank(),
axis.text.x = element_blank())
full_isle_of_wight$all_route_sections_df %>%
filter(routelink %in% c('RL1', 'RL2', 'RL3', 'RL4', 'RL5', 'RL6', 'RL7')) %>%
ggplot(aes(x = latitude, y = longitude, group = routelink, color = routelink)) +
geom_line() +
ggthemes::theme_few() +
theme(axis.text.y = element_blank(),
axis.text.x = element_blank())
print(unique(route_section_id))
print(unique(full_isle_of_wight$all_route_sections_df$route_section_id))
head(full_isle_of_wight$all_route_sections_df)
full_isle_of_wight$all_route_sections_df %>%
filter(route_section_id %in% c('RS1')) %>%
ggplot(aes(x = latitude, y = longitude, group = route_section_id, color = route_section_id)) +
geom_line() +
ggthemes::theme_few() +
theme(axis.text.y = element_blank(),
axis.text.x = element_blank())
names(full_isle_of_wight)
head(full_isle_of_wight$standard_service)
head(full_isle_of_wight$vehicle_journeys_and_departure_times)
unique(full_isle_of_wight$vehicle_journeys_and_departure_times$LineRef)
avl <- read_parquet('second_df_api_processed.parquet')
install.packages('arrow')
avl_uk_sample <- arrow::read_parquet('second_df_api_processed.parquet')
head(avl_uk_sample)
View(routes)
reticulate::repl_python()
source("~/.active-rstudio-document", echo=TRUE)
reticulate::repl_python()
install.packages('reticulate')
reticulate::repl_python()
import pandas as pd
Y
library(reticulate)
use_python('/opt/anaconda3/bin/python3)
library(reticulate)
use_python('/opt/anaconda3/bin/python3')
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr )
library(purrr)
library(data.table)
library(ggplot2)
reticulate::repl_python()
